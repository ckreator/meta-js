function rot(s) {
	let alpha = ["а", "б", "в", "г", "д", "е", "є", "ж", "з", "и", "і", "ї", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ь", "ю", "я"];
	let out = [];
	for (let k = 4; k < 5; k++) {
		out.push(s.split("").map(i => {
			if (i.match(/\s/))
				return i;
			let nu = (alpha.indexOf(i) - k);
			if (nu < 0)
				nu = alpha.length + nu; // minus
			console.log("nu: ", i, nu, alpha.indexOf(i))
			return alpha[nu];
		}).join(""))
	}
	console.log(out.join("\n"));
	return out;
}



let s = "фтйфлйсвбца цфк тхстєскщ цкук утжфтй";
let s1 = "утжфтйк утфчяиссв отсшлзисьлнстхцл лсштфрдьлм";

s2 = `фтйфлйсвбца цфк тхстєскщ цкук утжфтй
утжфтйк утфчяиссв отсшлзисьлнстхцл лсштфрдьлм
утжфтйк утфчяиссв ьлплхстхцл лсштфрдьлм
утжфтйк утфчяиссв уфдьийздцстхцл хкхцирк
утжфтйк утфчяиссв отсшлзисьлнстхцл хуфвртєдсл сд фтйжтптяиссв отсшлзисьлнстм дет
хиофицстм лсштфрдьлм уфк фидплйдьлм ькщ утжфтй лсштфрдьлв хцді єлзтртм тхтедр  т си утєкссл
 рдцк зт сим зтхцчу ч цифрлсдщ отрубцифстм еийуиок утжфтйд утфчяиссв отсшлзисьлнстхцл рді
 рлхьи єхвокн фдй отпк тцфкрдскн сихдсоьлтстєдскн зтхцчу зт зивотм йдофкцтм лсштфрдьлм  т
йеифлждіцахв є отрубцифслн хкхцирл дет  т уифиздіцахв єлз тзслім хкхцирк зт лсятм
утжфтйк утфчяиссв ьлплхстхцл лсштфрдьлм  т йеифлждіцахв є отрубцифслн хкхцирл дет  т
уифиздіцахв ут одсдпч йєвйоч хуфвртєдсл сд мм йрлсч дет уифиофчючєдссв  т уфкєтзкца зт
утфчяиссв мм вотхцл дет утєстрч йск иссб ьлплхслхца лсштфрдьлм ртїи ечцк утфчяисд сдєркхси
 йптєркхскотр д цдотї ч фийчпацдцл теіоцкєскщ єупкєлє й еточ хифизтєк д  т тцтючі хкхцирч
 ьв утжфтйд тхтепкєт доцчдпасд зпв хкхцир уифиздюл лсштфрдьлм  отрубцифскщ рифиї л хкхцир
 ципиотрчслодьлн сдєркхсл утфчяиссв ьлплхстхцл лсштфрдьлм си хплз упчцдцк й мм хдсоьлтстєдстб
 йрлстб  т єкотсчіцахв утєстєдїскрк тхтедрк й тежфчсцтєдстб рицтб сдуфкопдз цдотб
йрлстб і уифлтзкюсд отфиоьлв зивотм едйк здскщ
утжфтйк утфчяиссв уфдьийздцстхцл єлзртєписсв є техпчжтєчєдссл хуфвртєдсл сд хцєтфиссв
 цдокщ хкцчдьлн отпк єкйсдюисл сдєркхсл злм дет йскїчбца уфдьийздцслхца  дет епточбца зтхцчу
зт зивокщ  фихчфхлє во т тзкс отфкхцчєдю хкхцирк йдукцчі зтхцчу зт зивотм хпчїек д лсякн
утюксді злм ут епточєдссб ьатжт зтхцчуч цт уифякн отфкхцчєдю тзифїчі єлзртєписсв є
 техпчжтєчєдссл епточєдссв зтхцчуч зт фихчфхч ртїи ечцк утхцлнскр дет цкрюдхтєкр
утфчяиссв отсшлзисьлнстхцл л ьлплхстхцл лсштфрдьлм д цдотї уфкхцчустхцл л ьлплхстхцл єкйсдюискщ
 отрутсисцлє л фихчфхлє дхтл ртїчца ечцк єкопкодсл флйскрк сиеийуиюскрк єупкєдрк сд дхтл.`

//rot(s);
rot(s2);

function logStuff(s) {
	let alpha = ["а", "б", "в", "г", "д", "е", "є", "ж", "з", "и", "і", "ї", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ь", "ю", "я"];
	let count = {};
	// populate the count object
	s.split("").map(i => {if (!i.match(/\s/)) count[i] = (count[i] || 0) + 1;})
	alpha.map(i => {count[i] = count[i] || 0});
	let len = s.replace(" ", "").length;

	// l(k) = SUM [j=0 -> m-1] { count[j] * log2( p(j) ) }
	// where p(j) - probability of the char at index j in alphabet
	let max = -Infinity, maxEl = -1;
	let keys = [], sums = [];
	for (let i = 0; i < alpha.length; i++) {
		let sum = 0;
		for (let j = 0; j < alpha.length; j++) {
			//console.log("IN LOOP: ", sum, count[alpha[i]], count[alpha[j]])
			//console.log("ADDING: ", count[alpha[j]], Math.round(count[alpha[i]] * Math.log2(count[alpha[j]] == 0 ? 2 : count[alpha[j]] / len)))
			if (count[alpha[i]] == 0 || count[alpha[j]] == 0) {
				sum += 0;
				break;
			}

			//console.log("prob: ", alpha[i], Math.log2(count[alpha[j]] / len) * count[alpha[i]])
			sum += Math.log2(count[alpha[j]] / len) * count[alpha[i]]// count[alpha[j]], Math.round(count[alpha[i]] * Math.log2(count[alpha[j]] == 0 ? 2 : count[alpha[j]] / len))

		}
		//console.log(`${i}  ${sum}`)
		sums.push(sum)
		keys.push(i)
		if (sum > max) {
			max = sum;
			maxEl = i;
		}
	}
	console.log(keys.join("\t"))
	console.log(sums.map(i => {console.log("num: ", ("" + i).match(/\-?\d+(\.\d{1,3})?/)[0]); return ("" + i).match(/\-?\d+(\.\d{1,3})?/)[0] }).join("\t"))
	return maxEl + 1;
}

console.log(logStuff(s2))



// PERESTANOVKA
function singleMove(cipher) {
	let len;
	let out = [];
	//for (len = cipher.length; len > 0; len--) {
		let nu = "";
		//a = a.map(i => {return `${i.slice(1)}${i[0]}`})
		// turn rows into columns
		let tmp = "";
		for (let i = 0; i < 5; i++) {
			for(let j = 0; j < 25; j += 5)
				nu += cipher[j+i]
		}
		nu = nu.match(new RegExp(`.{${(len = Math.floor(Math.sqrt(cipher.length)))}}`, "g"))
		nu.push(nu.shift())
		nu = nu.join("")

		for (let i = 0; i < 5; i++) {
			for(let j = 0; j < 25; j += 5)
				tmp += nu[j+i]
		}
		console.log("compare: ", tmp, cipher)

		// put the first column to the end
		/*for (let i = 0; i < cipher.length; i++) {
			nu.push(nu.shift())
			console.log("NU: ", nu)
			tmp = "", n = nu.join("")
			for (let i = 0; i < 5; i++) {
				for(let j = 0; j < 25; j += 5)
					tmp += n[j+i]
			}
			out.push(tmp)
		}*/

		//out.push(nu.join(""));
	//}
	return out;
}

s = "АРЫКЗЫ_КЙТНЛ_ААЫ_ОЛБКЫТРТ"


//s = 'АЫНЫКР_Л_ЫЫК_ОТКЙАЛРЗТАБТ'

//console.log(singleMove(s))

let nus = `АЫНЫКР_Л_ЫЫК_ОТКЙАЛРЗТАБТ
АЫНЫКР_Л_ЫЫК_ОТЗТАБТКЙАЛР
АЫНЫКР_Л_ЫКЙАЛРЫК_ОТЗТАБТ
АЫНЫКР_Л_ЫКЙАЛРЗТАБТЫК_ОТ
АЫНЫКР_Л_ЫЗТАБТЫК_ОТКЙАЛР
АЫНЫКР_Л_ЫЗТАБТКЙАЛРЫК_ОТ
АЫНЫКЫК_ОТР_Л_ЫКЙАЛРЗТАБТ
АЫНЫКЫК_ОТР_Л_ЫЗТАБТКЙАЛР
АЫНЫКЫК_ОТКЙАЛРР_Л_ЫЗТАБТ
АЫНЫКЫК_ОТКЙАЛРЗТАБТР_Л_Ы
АЫНЫКЫК_ОТЗТАБТР_Л_ЫКЙАЛР
АЫНЫКЫК_ОТЗТАБТКЙАЛРР_Л_Ы
АЫНЫККЙАЛРР_Л_ЫЫК_ОТЗТАБТ
АЫНЫККЙАЛРР_Л_ЫЗТАБТЫК_ОТ
АЫНЫККЙАЛРЫК_ОТР_Л_ЫЗТАБТ
АЫНЫККЙАЛРЫК_ОТЗТАБТР_Л_Ы
АЫНЫККЙАЛРЗТАБТР_Л_ЫЫК_ОТ
АЫНЫККЙАЛРЗТАБТЫК_ОТР_Л_Ы
АЫНЫКЗТАБТР_Л_ЫЫК_ОТКЙАЛР
АЫНЫКЗТАБТР_Л_ЫКЙАЛРЫК_ОТ
АЫНЫКЗТАБТЫК_ОТР_Л_ЫКЙАЛР
АЫНЫКЗТАБТЫК_ОТКЙАЛРР_Л_Ы
АЫНЫКЗТАБТКЙАЛРР_Л_ЫЫК_ОТ
АЫНЫКЗТАБТКЙАЛРЫК_ОТР_Л_Ы
Р_Л_ЫАЫНЫКЫК_ОТКЙАЛРЗТАБТ
Р_Л_ЫАЫНЫКЫК_ОТЗТАБТКЙАЛР
Р_Л_ЫАЫНЫККЙАЛРЫК_ОТЗТАБТ
Р_Л_ЫАЫНЫККЙАЛРЗТАБТЫК_ОТ
Р_Л_ЫАЫНЫКЗТАБТЫК_ОТКЙАЛР
Р_Л_ЫАЫНЫКЗТАБТКЙАЛРЫК_ОТ
Р_Л_ЫЫК_ОТАЫНЫККЙАЛРЗТАБТ
Р_Л_ЫЫК_ОТАЫНЫКЗТАБТКЙАЛР
Р_Л_ЫЫК_ОТКЙАЛРАЫНЫКЗТАБТ
Р_Л_ЫЫК_ОТКЙАЛРЗТАБТАЫНЫК
Р_Л_ЫЫК_ОТЗТАБТАЫНЫККЙАЛР
Р_Л_ЫЫК_ОТЗТАБТКЙАЛРАЫНЫК
Р_Л_ЫКЙАЛРАЫНЫКЫК_ОТЗТАБТ
Р_Л_ЫКЙАЛРАЫНЫКЗТАБТЫК_ОТ
Р_Л_ЫКЙАЛРЫК_ОТАЫНЫКЗТАБТ
Р_Л_ЫКЙАЛРЫК_ОТЗТАБТАЫНЫК
Р_Л_ЫКЙАЛРЗТАБТАЫНЫКЫК_ОТ
Р_Л_ЫКЙАЛРЗТАБТЫК_ОТАЫНЫК
Р_Л_ЫЗТАБТАЫНЫКЫК_ОТКЙАЛР
Р_Л_ЫЗТАБТАЫНЫККЙАЛРЫК_ОТ
Р_Л_ЫЗТАБТЫК_ОТАЫНЫККЙАЛР
Р_Л_ЫЗТАБТЫК_ОТКЙАЛРАЫНЫК
Р_Л_ЫЗТАБТКЙАЛРАЫНЫКЫК_ОТ
Р_Л_ЫЗТАБТКЙАЛРЫК_ОТАЫНЫК
ЫК_ОТАЫНЫКР_Л_ЫКЙАЛРЗТАБТ
ЫК_ОТАЫНЫКР_Л_ЫЗТАБТКЙАЛР
ЫК_ОТАЫНЫККЙАЛРР_Л_ЫЗТАБТ
ЫК_ОТАЫНЫККЙАЛРЗТАБТР_Л_Ы
ЫК_ОТАЫНЫКЗТАБТР_Л_ЫКЙАЛР
ЫК_ОТАЫНЫКЗТАБТКЙАЛРР_Л_Ы
ЫК_ОТР_Л_ЫАЫНЫККЙАЛРЗТАБТ
ЫК_ОТР_Л_ЫАЫНЫКЗТАБТКЙАЛР
ЫК_ОТР_Л_ЫКЙАЛРАЫНЫКЗТАБТ
ЫК_ОТР_Л_ЫКЙАЛРЗТАБТАЫНЫК
ЫК_ОТР_Л_ЫЗТАБТАЫНЫККЙАЛР
ЫК_ОТР_Л_ЫЗТАБТКЙАЛРАЫНЫК
ЫК_ОТКЙАЛРАЫНЫКР_Л_ЫЗТАБТ
ЫК_ОТКЙАЛРАЫНЫКЗТАБТР_Л_Ы
ЫК_ОТКЙАЛРР_Л_ЫАЫНЫКЗТАБТ
ЫК_ОТКЙАЛРР_Л_ЫЗТАБТАЫНЫК
ЫК_ОТКЙАЛРЗТАБТАЫНЫКР_Л_Ы
ЫК_ОТКЙАЛРЗТАБТР_Л_ЫАЫНЫК
ЫК_ОТЗТАБТАЫНЫКР_Л_ЫКЙАЛР
ЫК_ОТЗТАБТАЫНЫККЙАЛРР_Л_Ы
ЫК_ОТЗТАБТР_Л_ЫАЫНЫККЙАЛР
ЫК_ОТЗТАБТР_Л_ЫКЙАЛРАЫНЫК
ЫК_ОТЗТАБТКЙАЛРАЫНЫКР_Л_Ы
ЫК_ОТЗТАБТКЙАЛРР_Л_ЫАЫНЫК
КЙАЛРАЫНЫКР_Л_ЫЫК_ОТЗТАБТ
КЙАЛРАЫНЫКР_Л_ЫЗТАБТЫК_ОТ
КЙАЛРАЫНЫКЫК_ОТР_Л_ЫЗТАБТ
КЙАЛРАЫНЫКЫК_ОТЗТАБТР_Л_Ы
КЙАЛРАЫНЫКЗТАБТР_Л_ЫЫК_ОТ
КЙАЛРАЫНЫКЗТАБТЫК_ОТР_Л_Ы
КЙАЛРР_Л_ЫАЫНЫКЫК_ОТЗТАБТ
КЙАЛРР_Л_ЫАЫНЫКЗТАБТЫК_ОТ
КЙАЛРР_Л_ЫЫК_ОТАЫНЫКЗТАБТ
КЙАЛРР_Л_ЫЫК_ОТЗТАБТАЫНЫК
КЙАЛРР_Л_ЫЗТАБТАЫНЫКЫК_ОТ
КЙАЛРР_Л_ЫЗТАБТЫК_ОТАЫНЫК
КЙАЛРЫК_ОТАЫНЫКР_Л_ЫЗТАБТ
КЙАЛРЫК_ОТАЫНЫКЗТАБТР_Л_Ы
КЙАЛРЫК_ОТР_Л_ЫАЫНЫКЗТАБТ
КЙАЛРЫК_ОТР_Л_ЫЗТАБТАЫНЫК
КЙАЛРЫК_ОТЗТАБТАЫНЫКР_Л_Ы
КЙАЛРЫК_ОТЗТАБТР_Л_ЫАЫНЫК
КЙАЛРЗТАБТАЫНЫКР_Л_ЫЫК_ОТ
КЙАЛРЗТАБТАЫНЫКЫК_ОТР_Л_Ы
КЙАЛРЗТАБТР_Л_ЫАЫНЫКЫК_ОТ
КЙАЛРЗТАБТР_Л_ЫЫК_ОТАЫНЫК
КЙАЛРЗТАБТЫК_ОТАЫНЫКР_Л_Ы
КЙАЛРЗТАБТЫК_ОТР_Л_ЫАЫНЫК
ЗТАБТАЫНЫКР_Л_ЫЫК_ОТКЙАЛР
ЗТАБТАЫНЫКР_Л_ЫКЙАЛРЫК_ОТ
ЗТАБТАЫНЫКЫК_ОТР_Л_ЫКЙАЛР
ЗТАБТАЫНЫКЫК_ОТКЙАЛРР_Л_Ы
ЗТАБТАЫНЫККЙАЛРР_Л_ЫЫК_ОТ
ЗТАБТАЫНЫККЙАЛРЫК_ОТР_Л_Ы
ЗТАБТР_Л_ЫАЫНЫКЫК_ОТКЙАЛР
ЗТАБТР_Л_ЫАЫНЫККЙАЛРЫК_ОТ
ЗТАБТР_Л_ЫЫК_ОТАЫНЫККЙАЛР
ЗТАБТР_Л_ЫЫК_ОТКЙАЛРАЫНЫК
ЗТАБТР_Л_ЫКЙАЛРАЫНЫКЫК_ОТ
ЗТАБТР_Л_ЫКЙАЛРЫК_ОТАЫНЫК
ЗТАБТЫК_ОТАЫНЫКР_Л_ЫКЙАЛР
ЗТАБТЫК_ОТАЫНЫККЙАЛРР_Л_Ы
ЗТАБТЫК_ОТР_Л_ЫАЫНЫККЙАЛР
ЗТАБТЫК_ОТР_Л_ЫКЙАЛРАЫНЫК
ЗТАБТЫК_ОТКЙАЛРАЫНЫКР_Л_Ы
ЗТАБТЫК_ОТКЙАЛРР_Л_ЫАЫНЫК
ЗТАБТКЙАЛРАЫНЫКР_Л_ЫЫК_ОТ
ЗТАБТКЙАЛРАЫНЫКЫК_ОТР_Л_Ы
ЗТАБТКЙАЛРР_Л_ЫАЫНЫКЫК_ОТ
ЗТАБТКЙАЛРР_Л_ЫЫК_ОТАЫНЫК
ЗТАБТКЙАЛРЫК_ОТАЫНЫКР_Л_Ы
ЗТАБТКЙАЛРЫК_ОТР_Л_ЫАЫНЫК`

let nu = "";
//a = a.map(i => {return `${i.slice(1)}${i[0]}`})
// turn rows into columns
let tmp = "";
nus.split("\n").map(cipher => {
	nu ="";
	for (let i = 0; i < 5; i++) {
		for(let j = 0; j < 25; j += 5)
			nu += cipher[j+i]
	}
	//console.log("NU: ", nu)
})

// ЗАКРЫТЫЙ_КАНАЛ_БЫЛ_ОТКРЫТ

/*
[
'А Р Ы К З',
'Ы _ К Й Т',
'Н Л _ А А',
'Ы _ О Л Б',
'К Ы Т Р Т' ]

А Ы Н Ы К
Р _ Л _ Ы
Ы К _ О Т
К Й А Л Р
З Т А Б Т
*/

// | 0 | 1
// | 1 | 2


let often = { '11': 12,
  '12': 22,
  '15': 12,
  '18': 5,
  '19': 17,
  '20': 13,
  '25': 24,
  '28': 10,
  '30': 12,
  '32': 43,
  '36': 6,
  '37': 35,
  '39': 7,
  '41': 4,
  '46': 60,
  '48': 2,
  '52': 28,
  '55': 37,
  '57': 35,
  '60': 29,
  '61': 2,
  '63': 9,
  '67': 21,
  '74': 1,
  '75': 18,
  '78': 6,
  '91': 16,
  '99': 39,
  '15,': 1,
  '52,': 2,
  '19,': 1,
  '91.': 1,
  '39,': 1,
  '99,': 3,
  '91,': 1,
  '-': 2,
  '52.': 1,
  '63,': 1,
  '60.': 1,
  '“37': 1,
  '99”': 1,
  '55.': 1,
  '32.': 1 }
